"""
Django settings for base project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os,dj_database_url
from dotenv import load_dotenv
from typing import Optional,List
from django.core.management.utils import get_random_secret_key


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")
if not SECRET_KEY:
    SECRET_KEY = get_random_secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Assuming get_list is a function that converts a comma-separated string to a list
def get_list(value: Optional[str]) -> list[str]:
    if value is None:
        return []
    return [v.strip() for v in value.split(',') if v.strip()]


CSRF_TRUSTED_ORIGINS  = get_list(os.environ.get("CSRF_TRUSTED_ORIGINS","http://127.0.0.1:8000"))
CSRF_TRUSTED_ORIGINS.extend(['*'])


CORS_ALLOWED_ORIGINS: Optional[List[str]] = get_list(os.environ.get("CORS_ALLOWED_ORIGINS", "http://127.0.0.1:8000"))
CORS_ALLOWED_ORIGINS.extend(['*'])


CORS_ORIGIN_WHITELIST: Optional[List[str]] = get_list(os.environ.get("CORS_ORIGIN_WHITELIST", "http://localhost:3000"))
CORS_ORIGIN_WHITELIST.extend(['*'])


ALLOWED_HOSTS = [
    '127.0.0.1',
    '*',
]

CSRF_TRUSTED_ORIGINS = [
    "http://127.0.0.1:8000",

]

CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1",

]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

]

LOCAL_APPS = [
    'apps.user',
 
]

THIRD_PARTY_APPS = [
    'drf_yasg',
    'rest_framework',
    'corsheaders',
    "rest_framework_simplejwt",

]

INSTALLED_APPS = INSTALLED_APPS + LOCAL_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'base_core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'base_core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
load_dotenv()

try:
    database_port = int(os.environ.get('DATABASE_PORT'))
except ValueError as e:
    raise ValueError(f"Port could not be cast to integer value as {e}")

DATABASES = {
    'default': dj_database_url.config(
        default=f"postgres://{os.environ.get('DATABASE_USER')}:{os.environ.get('DATABASE_PASSWORD')}@{os.environ.get('DATABASE_HOST')}:{database_port}/{os.environ.get('DATABASE_NAME')}", 
        conn_max_age=600,
        conn_health_checks=True,
    )
    
    
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'user.User' # This is the custom user model (app name and model name)


SWAGER_SETTINGS = {
    'DEFAULT_API_URL' : os.environ.get('SWAGGER_DEFAULT_API_URL',""),
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS' : {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',  # Correct spelling
    )
}



SIMPLE_JWT = {
  
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': 'eShVmYq3t6w9z$C&E)H@McQfTjWnZr4u7x!A%D*G-JaNdRgUkXp2s5v8y/B?E(H+',
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

}



EMAIL_BACKEND         = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST            = os.environ.get('EMAIL_HOST')
EMAIL_HOST_USER       = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD   = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_DOMAIN          = os.environ.get('EMAIL_DOMAIN')
EMAIL_PORT            = os.environ.get('EMAIL_PORT')
DEFAULT_FROM_EMAIL    = os.environ.get('DEFAULT_FROM_EMAIL')